/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tester;

import app.Block;
import app.Blockchain;
import app.Claim;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jnguy
 */
public class EnsuranceUI extends javax.swing.JFrame {

    boolean blockchainLoaded = false;

    BufferedReader br = null;
    String line = "";

    Blockchain blockchain = null;

    /**
     * Creates new form InsuranceAppUI
     */
    public EnsuranceUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        addClaimChooser = new javax.swing.JFileChooser();
        verifyClaimChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder("Ensurance"), "Ensurance"));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Previous Hash", "Current Hash", "Claim Hash"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jButton1.setText("Open CSV...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setText("Verify Claim...");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton2.setText("Save CSV...");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Add Claim...");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(0, 305, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        jFileChooser1.setCurrentDirectory(new File("C:\\Users\\jnguy\\Documents"));
        int returnVal = jFileChooser1.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser1.getSelectedFile();
            // What to do with the file, e.g. display it in a TextArea
            //jTextArea1.read(new FileReader(file.getAbsolutePath()), null);
            try {
                blockchain = new Blockchain(file.getAbsolutePath());

                DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                ArrayList<Block> list = blockchain.blockchain;
                for (Block block : list) {
                    model.addRow(new String[]{block.previousHash, block.hash, block.claimHash});
                }
            } catch (IOException ex) {
                Logger.getLogger(EnsuranceUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            blockchainLoaded = true;
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        if (blockchainLoaded == false) {
            JOptionPane.showMessageDialog(rootPane, "Blockchain not loaded!", "Alert", JOptionPane.ERROR_MESSAGE);
        } else {
            verifyClaimChooser.setCurrentDirectory(new File("C:\\Users\\jnguy\\Documents"));
            int returnVal = verifyClaimChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = verifyClaimChooser.getSelectedFile();
                // What to do with the file, e.g. display it in a TextArea
                //jTextArea1.read(new FileReader(file.getAbsolutePath()), null);
                Claim test;
                try {
                    test = new Claim(file.getAbsolutePath());
                    Block block = new Block(test, blockchain.getLastHash());
                    if (blockchain.blockIsUnique(block) != true) {
                        JOptionPane.showMessageDialog(rootPane, "This claim is not unique to the blockchain!", "Alert", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "This claim is unique to the blockchain!", "Alert", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(EnsuranceUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("File access cancelled by user.");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (blockchainLoaded == false) {
            JOptionPane.showMessageDialog(rootPane, "There is no blockchain to save!", "Alert", JOptionPane.ERROR_MESSAGE);
        } else {
            int retrieval = jFileChooser2.showSaveDialog(null);
            if (retrieval == JFileChooser.APPROVE_OPTION) {
                try {
                    FileWriter fw = new FileWriter(jFileChooser2.getSelectedFile() + ".csv");
                    fw.append(blockchain.fileOutput());
                    fw.flush();
                    fw.close();
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (blockchainLoaded == false) {
            JOptionPane.showMessageDialog(rootPane, "Blockchain not loaded! A new one will be created in lieu.", "Alert", JOptionPane.INFORMATION_MESSAGE);
            blockchain = new Blockchain();
            addClaimChooser.setCurrentDirectory(new File("C:\\Users\\jnguy\\Documents"));
            int returnVal = addClaimChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = addClaimChooser.getSelectedFile();
                // What to do with the file, e.g. display it in a TextArea
                //jTextArea1.read(new FileReader(file.getAbsolutePath()), null);
                Claim test;
                try {
                    test = new Claim(file.getAbsolutePath());
                    Block block = new Block(test, "0");
                    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                    model.addRow(new String[]{block.previousHash, block.hash, block.claimHash});
                    if (blockchain.addAndCheckUnique(block) != true) {
                        JOptionPane.showMessageDialog(rootPane, "Claim added. It is not unique to the blockchain!", "Alert", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Claim added. It is unique to the blockchain!", "Alert", JOptionPane.INFORMATION_MESSAGE);
                    }
                    blockchainLoaded = true;
                } catch (IOException ex) {
                    Logger.getLogger(EnsuranceUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("File access cancelled by user.");
            }
        } else {
            addClaimChooser.setCurrentDirectory(new File("C:\\Users\\jnguy\\Documents"));
            int returnVal = addClaimChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = addClaimChooser.getSelectedFile();
                // What to do with the file, e.g. display it in a TextArea
                //jTextArea1.read(new FileReader(file.getAbsolutePath()), null);
                Claim test;
                try {
                    test = new Claim(file.getAbsolutePath());
                    Block block = new Block(test, blockchain.getLastHash());
                    DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
                    model.addRow(new String[]{block.previousHash, block.hash, block.claimHash});
                    if (blockchain.addAndCheckUnique(block) != true) {
                        JOptionPane.showMessageDialog(rootPane, "Claim added. It is not unique to the blockchain!", "Alert", JOptionPane.ERROR_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Claim added. It is unique to the blockchain!", "Alert", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(EnsuranceUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                System.out.println("File access cancelled by user.");
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnsuranceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnsuranceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnsuranceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnsuranceUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EnsuranceUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser addClaimChooser;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JFileChooser verifyClaimChooser;
    // End of variables declaration//GEN-END:variables
}
